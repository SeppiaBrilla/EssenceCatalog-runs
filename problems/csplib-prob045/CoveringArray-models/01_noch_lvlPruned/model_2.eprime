language ESSENCE' 1.0

given k: int(1..)
given b: int(1..)
given t: int(1..)
given g: int(2..)
where k >= t
where b >= g ** t
find CoverTest_ExplicitWithRepetitionR10_Flag: int(b)
find CoverTest_ExplicitWithRepetitionR10_Values_Function1D: matrix indexed by [int(1..b), int(1..k)] of int(1..g)
branching on [CoverTest_ExplicitWithRepetitionR10_Flag, CoverTest_ExplicitWithRepetitionR10_Values_Function1D]
such that
    and([or([and([CoverTest_ExplicitWithRepetitionR10_Values_Function1D
                      [q19, testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q21]]
                  = testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q21]
                      | q21 : int(1..k * g),
                        q21 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker])
                 | q19 : int(1..b), q19 <= b])
             | testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker : int(0..k * g),
               testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1 : matrix indexed by [int(1..k
                                                                                                                        *
                                                                                                                        g)] of int(1..k),
               testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2 : matrix indexed by [int(1..k
                                                                                                                        *
                                                                                                                        g)] of int(1..g),
               and([q1 + 1 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker ->
                    flatten([[testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q1]; int(1)],
                             [testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q1]; int(1)];
                                 int(1..2)])
                    <lex
                    flatten([[testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q1 + 1];
                                  int(1)],
                             [testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q1 + 1];
                                  int(1)];
                                 int(1..2)])
                        | q1 : int(1..k * g - 1)]),
               and([q2 > testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker ->
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q2] = 1 /\
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q2] = 1
                        | q2 : int(1..k * g)]),
               and([testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q15] !=
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q16]
                        | q15 : int(1..k * g), q16 : int(1..k * g),
                          q15 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker, q16 > q15,
                          q16 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker]),
               sum([1   | q18 : int(1..k * g),
                          q18 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker])
               = t]),
    and([[CoverTest_ExplicitWithRepetitionR10_Values_Function1D[q6, q12] | q12 : int(1..k)] <=lex
         [CoverTest_ExplicitWithRepetitionR10_Values_Function1D[q6 + 1, q13] | q13 : int(1..k)]
             | q6 : int(1..b - 1), q6 + 1 <= b]),
    and([and([CoverTest_ExplicitWithRepetitionR10_Values_Function1D[q7, q14] = 1 | q14 : int(1..k)])
             | q7 : int(1..b), q7 > b])

$ Conjure's
$ {"finds": [{"Name": "CoverTest"}], "givens": [{"Name": "k"}, {"Name": "b"}, {"Name": "t"}, {"Name": "g"}],
$  "enumGivens": [], "enumLettings": [],
$  "lettings":
$      [[{"Name": "alphabet"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "alphabet"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"Name": "g"},
$                                {"DeclNoRepr":
$                                     ["Given", {"Name": "g"},
$                                      {"DomainInt":
$                                           [{"TagInt": []},
$                                            [{"RangeLowerBounded":
$                                                  {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]},
$                                      {"NoRegion": []}]}]}]}]]}}],
$       [{"Name": "switches"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "switches"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"Name": "k"},
$                                {"DeclNoRepr":
$                                     ["Given", {"Name": "k"},
$                                      {"DomainInt":
$                                           [{"TagInt": []},
$                                            [{"RangeLowerBounded":
$                                                  {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]},
$                                      {"NoRegion": []}]}]}]}]]}}]],
$  "unnameds":
$      [[{"Name": "alphabet"}, {"Reference": [{"Name": "g"}, null]}],
$       [{"Name": "switches"}, {"Reference": [{"Name": "k"}, null]}]],
$  "strategyQ": {"PickFirst": []}, "strategyA": {"PickAll": []},
$  "trailCompact":
$      [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1]],
$  "trailVerbose": [], "trailRewrites": [], "nameGenState": [["q", 22]], "nbExtraGivens": 0,
$  "representations":
$      [[{"Name": "k"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "t"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "b"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "g"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]}],
$       [{"Name": "CoverTest"},
$        {"DomainMSet":
$             [{"MSet_ExplicitWithRepetition": []},
$              [{"SizeAttr_Size":
$                    {"Reference":
$                         [{"Name": "b"},
$                          {"DeclHasRepr":
$                               ["Given", {"Name": "b"},
$                                {"DomainInt":
$                                     [{"TagInt": []},
$                                      [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}]}]}},
$               {"OccurAttr_None": []}],
$              {"DomainFunction":
$                   [{"Function_1D": []}, [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                    {"DomainInt":
$                         [{"TagUnnamed": "switches"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "k"},
$                                       {"DeclHasRepr":
$                                            ["Given", {"Name": "k"},
$                                             {"DomainInt":
$                                                  [{"TagInt": []},
$                                                   [{"RangeLowerBounded":
$                                                         {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}]}]}]}]]},
$                    {"DomainInt":
$                         [{"TagUnnamed": "alphabet"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "g"},
$                                       {"DeclHasRepr":
$                                            ["Given", {"Name": "g"},
$                                             {"DomainInt":
$                                                  [{"TagInt": []},
$                                                   [{"RangeLowerBounded":
$                                                         {"Constant":
$                                                              {"ConstantInt": [{"TagInt": []}, 2]}}}]]}]}]}]}]]}]}]}]],
$  "representationsTree":
$      [[{"Name": "CoverTest"},
$        [{"rootLabel": {"MSet_ExplicitWithRepetition": []},
$          "subForest":
$              [{"rootLabel": {"Function_1D": []},
$                "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]}]}]],
$       [{"Name": "b"}, [{"rootLabel": null, "subForest": []}]], [{"Name": "g"}, [{"rootLabel": null, "subForest": []}]],
$       [{"Name": "k"}, [{"rootLabel": null, "subForest": []}]], [{"Name": "t"}, [{"rootLabel": null, "subForest": []}]]],
$  "originalDomains":
$      [[{"Name": "k"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "b"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "t"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "g"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]}],
$       [{"Name": "CoverTest"},
$        {"DomainMSet":
$             [[], [{"SizeAttr_Size": {"Reference": [{"Name": "b"}, null]}}, {"OccurAttr_None": []}],
$              {"DomainFunction":
$                   [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                    {"DomainReference": [{"Name": "switches"}, null]},
$                    {"DomainReference": [{"Name": "alphabet"}, null]}]}]}]],
$  "trailGeneralised":
$      [[-772262274067488340, -8174601092963831903], [2744019347654752510, 7876218069904199043],
$       [-761593462729330717, 3880370181380464150], [-2810100290084783271, 3355915057926545352],
$       [3640772317148206514, -4071732060531049923], [-7325464557729289256, 1726596875387937387],
$       [3226618200563019248, 3979806723358373375], [-6894568491846461070, 4186150985840511909],
$       [454823132257744218, -3960717951237082590], [-6881660260298172478, 8708173282486553402],
$       [6018935243516836319, 3101959891276857877], [369049289811235998, 148411794304296708],
$       [-3669439929072668749, 5413844598716699445], [4702779755463366755, 2182792087570043873],
$       [2660782711133493844, -6744574598775534141], [5066215404439116218, -8992013176171378969],
$       [8181927151972243492, 4825249367250107199], [2573702295232217549, -6991814779019783583],
$       [-3185074940780046771, -964444860799292650], [8798726608574756357, -976575822330792486],
$       [-8869303769393012803, -3487485514108225033], [-4408460683890580153, -7597384805353259963],
$       [3077727148256134833, -8907634087914470167], [1790018857836771667, -2954611076146911406],
$       [-3707102960645545110, 4172017826381478452], [-8290112871149320911, 1935650935956806215],
$       [-1890537474986022261, -4712904078363457919], [-1392882731279641203, -3160653619583547512],
$       [-1691181075626536145, 6420224558473786665], [-2102734921007515381, 6479569929218471378],
$       [-4254195841207013617, -7492253416140240925], [1557678559699712203, -5752393185559152353],
$       [7708332435864707164, 3101959891276857877], [5699714959984469317, 3277699976609778417],
$       [-2702173804284356897, -7077119036482289012], [-2842231055709155901, -4471056709270613527],
$       [5376440052052554018, 228076210235851859], [-2184074533974716343, -4549852063007944222],
$       [3076653454159792799, 749155395485025258], [2300027843377512500, 3101959891276857877],
$       [-8284523259718392169, 5921991859233605109], [9013276489158567922, -406014396423832357],
$       [131928272213024367, 3209471559321127755], [-6606775896744517009, -5606412296663818545],
$       [8557025010748779748, 3101959891276857877], [-971338751928515427, 3753535299498849625],
$       [8544432370929488599, 3962521846636933529], [-739639830339759393, -8010155628120752469],
$       [-1979699041979921848, 5420714661313803053], [-5199867941180775235, -2710821120224671855],
$       [-7550221681393296627, 8025498888737249597]]}
