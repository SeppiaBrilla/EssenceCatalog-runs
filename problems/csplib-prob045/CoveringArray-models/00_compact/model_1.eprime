language ESSENCE' 1.0

given k: int(1..)
given b: int(1..)
given t: int(1..)
given g: int(2..)
where k >= t
where b >= g ** t
find CoverTest_ExplicitWithFlagsR10_Flags: matrix indexed by [int(1..b)] of int(0..b)
find CoverTest_ExplicitWithFlagsR10_Values_Function1D: matrix indexed by [int(1..b), int(1..k)] of int(1..g)
branching on [CoverTest_ExplicitWithFlagsR10_Flags, CoverTest_ExplicitWithFlagsR10_Values_Function1D]
such that
    and([or([CoverTest_ExplicitWithFlagsR10_Flags[q17] > 0 /\
             and([CoverTest_ExplicitWithFlagsR10_Values_Function1D
                      [q17, testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q19]]
                  = testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q19]
                      | q19 : int(1..k * g),
                        q19 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker])
                 | q17 : int(1..b)])
             | testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker : int(0..k * g),
               testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1 : matrix indexed by [int(1..k
                                                                                                                        *
                                                                                                                        g)] of int(1..k),
               testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2 : matrix indexed by [int(1..k
                                                                                                                        *
                                                                                                                        g)] of int(1..g),
               and([q1 + 1 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker ->
                    flatten([[testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q1]; int(1)],
                             [testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q1]; int(1)];
                                 int(1..2)])
                    <lex
                    flatten([[testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q1 + 1];
                                  int(1)],
                             [testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q1 + 1];
                                  int(1)];
                                 int(1..2)])
                        | q1 : int(1..k * g - 1)]),
               and([q2 > testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker ->
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q2] = 1 /\
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_2[q2] = 1
                        | q2 : int(1..k * g)]),
               and([testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q13] !=
                    testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Values_1[q14]
                        | q13 : int(1..k * g), q14 : int(1..k * g),
                          q13 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker, q14 > q13,
                          q14 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker]),
               sum([1   | q16 : int(1..k * g),
                          q16 <= testcase_FunctionAsRelation_RelationAsSet_ExplicitVarSizeWithMarker_Marker])
               = t]),
    and([CoverTest_ExplicitWithFlagsR10_Flags[q6 + 1] > 0 ->
         [CoverTest_ExplicitWithFlagsR10_Values_Function1D[q6, q20] | q20 : int(1..k)] <lex
         [CoverTest_ExplicitWithFlagsR10_Values_Function1D[q6 + 1, q21] | q21 : int(1..k)]
             | q6 : int(1..b - 1)]),
    and([CoverTest_ExplicitWithFlagsR10_Flags[q7] = 0 ->
         and([CoverTest_ExplicitWithFlagsR10_Values_Function1D[q7, q22] = 1 | q22 : int(1..k)])
             | q7 : int(1..b)]),
    and([CoverTest_ExplicitWithFlagsR10_Flags[q8 + 1] > 0 -> CoverTest_ExplicitWithFlagsR10_Flags[q8] > 0
             | q8 : int(1..b - 1)]),
    b = sum([CoverTest_ExplicitWithFlagsR10_Flags[q10] | q10 : int(1..b)])

$ Conjure's
$ {"finds": [{"Name": "CoverTest"}], "givens": [{"Name": "k"}, {"Name": "b"}, {"Name": "t"}, {"Name": "g"}],
$  "enumGivens": [], "enumLettings": [],
$  "lettings":
$      [[{"Name": "alphabet"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "alphabet"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"Name": "g"},
$                                {"DeclNoRepr":
$                                     ["Given", {"Name": "g"},
$                                      {"DomainInt":
$                                           [{"TagInt": []},
$                                            [{"RangeLowerBounded":
$                                                  {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]},
$                                      {"NoRegion": []}]}]}]}]]}}],
$       [{"Name": "switches"},
$        {"Domain":
$             {"DomainInt":
$                  [{"TagUnnamed": "switches"},
$                   [{"RangeBounded":
$                         [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                          {"Reference":
$                               [{"Name": "k"},
$                                {"DeclNoRepr":
$                                     ["Given", {"Name": "k"},
$                                      {"DomainInt":
$                                           [{"TagInt": []},
$                                            [{"RangeLowerBounded":
$                                                  {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]},
$                                      {"NoRegion": []}]}]}]}]]}}]],
$  "unnameds":
$      [[{"Name": "alphabet"}, {"Reference": [{"Name": "g"}, null]}],
$       [{"Name": "switches"}, {"Reference": [{"Name": "k"}, null]}]],
$  "strategyQ": {"PickFirst": []}, "strategyA": {"Compact": []},
$  "trailCompact":
$      [[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1],
$       [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]],
$  "trailVerbose": [], "trailRewrites": [], "nameGenState": [["q", 23]], "nbExtraGivens": 0,
$  "representations":
$      [[{"Name": "k"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "t"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "b"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "g"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]}],
$       [{"Name": "CoverTest"},
$        {"DomainMSet":
$             [{"MSet_ExplicitWithFlags": []},
$              [{"SizeAttr_Size":
$                    {"Reference":
$                         [{"Name": "b"},
$                          {"DeclHasRepr":
$                               ["Given", {"Name": "b"},
$                                {"DomainInt":
$                                     [{"TagInt": []},
$                                      [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}]}]}},
$               {"OccurAttr_None": []}],
$              {"DomainFunction":
$                   [{"Function_1D": []}, [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                    {"DomainInt":
$                         [{"TagUnnamed": "switches"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "k"},
$                                       {"DeclHasRepr":
$                                            ["Given", {"Name": "k"},
$                                             {"DomainInt":
$                                                  [{"TagInt": []},
$                                                   [{"RangeLowerBounded":
$                                                         {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}]}]}]}]]},
$                    {"DomainInt":
$                         [{"TagUnnamed": "alphabet"},
$                          [{"RangeBounded":
$                                [{"Constant": {"ConstantInt": [{"TagInt": []}, 1]}},
$                                 {"Reference":
$                                      [{"Name": "g"},
$                                       {"DeclHasRepr":
$                                            ["Given", {"Name": "g"},
$                                             {"DomainInt":
$                                                  [{"TagInt": []},
$                                                   [{"RangeLowerBounded":
$                                                         {"Constant":
$                                                              {"ConstantInt": [{"TagInt": []}, 2]}}}]]}]}]}]}]]}]}]}]],
$  "representationsTree":
$      [[{"Name": "CoverTest"},
$        [{"rootLabel": {"MSet_ExplicitWithFlags": []},
$          "subForest":
$              [{"rootLabel": {"Function_1D": []},
$                "subForest": [{"rootLabel": null, "subForest": []}, {"rootLabel": null, "subForest": []}]}]}]],
$       [{"Name": "b"}, [{"rootLabel": null, "subForest": []}]], [{"Name": "g"}, [{"rootLabel": null, "subForest": []}]],
$       [{"Name": "k"}, [{"rootLabel": null, "subForest": []}]], [{"Name": "t"}, [{"rootLabel": null, "subForest": []}]]],
$  "originalDomains":
$      [[{"Name": "k"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "b"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "t"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 1]}}}]]}],
$       [{"Name": "g"},
$        {"DomainInt": [{"TagInt": []}, [{"RangeLowerBounded": {"Constant": {"ConstantInt": [{"TagInt": []}, 2]}}}]]}],
$       [{"Name": "CoverTest"},
$        {"DomainMSet":
$             [[], [{"SizeAttr_Size": {"Reference": [{"Name": "b"}, null]}}, {"OccurAttr_None": []}],
$              {"DomainFunction":
$                   [[], [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                    {"DomainReference": [{"Name": "switches"}, null]},
$                    {"DomainReference": [{"Name": "alphabet"}, null]}]}]}]],
$  "trailGeneralised":
$      [[906937647233725433, 6880620316160919842], [5992864897799971964, -2674106478113796543],
$       [-2308655125841097489, 9039943212285020702], [-7489345606273533451, -8389159843990668319],
$       [6088997673138481529, 7198412438828318220], [-6047963834884179159, 8304877063890975961],
$       [-8148047469407921060, -8405872911161746693], [-6976555295559452323, 2286907011361720730],
$       [1370515721138700159, 4380334374888339330], [-1267561583062412107, 8778328279035293693],
$       [8647333251945443808, -7625488741372238525], [4444098810390905041, -5051413658476840359],
$       [6143001401002824531, -3556006396557249137], [7843280622272148364, 1726022099162565852],
$       [3622262560472192406, -9160315572159461469], [-1343221952038918821, -1084406970523055326],
$       [4390495476626606225, -4220269630395961568], [-902582830400298178, -7900747118897353975],
$       [8468815783487975596, -1233471347351232605], [2771283324901552292, 7266453665488096195],
$       [2585046534771307546, 1840773824724719321], [5260423364975515502, 124333071467716640],
$       [6978507782740602094, -7162082384247298218], [-152838792750194394, -7844176739468566621],
$       [1211149746278356721, -2162176312178007003], [8959506530619139325, -8940291331199953255],
$       [-3525260268163146442, 5979436056060112139], [-5884348577122065412, -4971194653853967945],
$       [6937962773936988268, -8128312141379516403], [2538919777450461545, -9198486261996866271],
$       [5516853763006391641, -899614000504335558], [172613277168379577, 8403339776810091862],
$       [-3123842455241360295, 3513359991697100731], [6217427479386264799, 531293100660819289],
$       [1584391086037877949, -530478918904779015], [247325277569455375, -2954611076146911406],
$       [-566761901551926114, 4172017826381478452], [-1492383392797354503, 1935650935956806215],
$       [-2834765276979250817, -4712904078363457919], [-5427048645763198347, -3160653619583547512],
$       [5840787483200934735, 6420224558473786665], [-5037202305511255157, 6479569929218471378],
$       [994403000007483931, -7492253416140240925], [-971338751928515427, 5525528078961873070],
$       [8544432370929488599, 3962521846636933529], [-739639830339759393, -8010155628120752469],
$       [-1979699041979921848, 5420714661313803053], [-5199867941180775235, -2710821120224671855],
$       [-7550221681393296627, 8025498888737249597]]}
